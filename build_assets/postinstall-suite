#!/bin/zsh
#
# Copyright 2021-Present Erik Gomez.
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# If you change your agent/daemon files name, update the following lines
launch_agent_plist_name='com.github.macadmins.Nudge.plist'
launch_daemon_plist_name='com.github.macadmins.Nudge.logger.plist'

# In Nudge 1.1.12.81501, a duplicate label caused corruption in the BTM database.
# Check if we are upgrading from 81501, and if so, remediate the corruption.
if /usr/bin/grep -q -e ".*1.1.12.81501.*" /Applications/Utilities/Nudge.app/Contents/Info.plist; then
  echo "Nudge 1.1.12.81501 is installed - proceeding with remediation."

  # Determine BTM plist path. On macOS 13.3 and lower, v4; higher and on to 14, v8.
  if [[ -f "/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v8.btm" ]]; then
    btm_plist_path="/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v8.btm"
    echo "Set BTM plist path to v8"
  elif [[ -f "/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v4.btm" ]]; then
    btm_plist_path="/private/var/db/com.apple.backgroundtaskmanagement/BackgroundItems-v4.btm"
    echo "Set BTM plist path to v4"
  else
    echo "Error: unable to locate a BTM plist, no remediation occurred. Does this OS support BTM features?"
  fi

  line_count = 0
  signing_re='.*"com.github.macadmins.Nudge".*T4SK8ZXCXG\)'

  while True; do
    plist_entry=$(/usr/libexec/PlistBuddy -c "Print :\$objects:$line_count" $btm_plist_path 2>&1)
    if [[ "${plist_entry}" =~ $signing_re ]]; then
      # Remove the bad entry
      /usr/libexec/PlistBuddy -c "Delete :\$objects:$line_count" $btm_plist
      # Kickstart BTM to load in the modified DB
      /bin/launchctl kickstart -k system/com.apple.backgroundtaskmanagementd
      break

    elif [[ ${plist_entry} =~ ", Does Not Exist" ]] || [[ $line_count -gt 100000 ]]; then
      # Exit if we've ran through the entire plist or we hit 100,000 lines (to avoid runaway)
      echo "Error: did not find signing data entry, or timed out at 100,000 lines processed."
    else
      ((LINE_COUNT++))
    fi
  done
else
  echo "No remediation needed for BTM issues."
fi

# Base paths
launch_agent_base_path='Library/LaunchAgents/'
launch_daemon_base_path='Library/LaunchDaemons/'

# Load agent and daemon if installing to a running system
if [[ $3 == "/" ]] ; then
  ## Agent
  # Fail the install if the admin forgets to change their paths and they don't exist.
  if [ ! -e "$3/${launch_agent_base_path}${launch_agent_plist_name}" ]; then
    echo "LaunchAgent missing, exiting"
    exit 1
  fi

  # Current console user information
  console_user=$(/usr/bin/stat -f "%Su" /dev/console)
  console_user_uid=$(/usr/bin/id -u "$console_user")

  # Only enable the LaunchAgent if there is a user logged in, otherwise rely on built in LaunchAgent behavior
  if [[ -z "$console_user" ]]; then
    echo "Did not detect user"
  elif [[ "$console_user" == "loginwindow" ]]; then
    echo "Detected Loginwindow Environment"
  elif [[ "$console_user" == "_mbsetupuser" ]]; then
    echo "Detect SetupAssistant Environment"
  elif [[ "$console_user" == "root" ]]; then
    echo "Detect root as currently logged-in user"
  else
    # Unload the agent so it can be triggered on re-install
    /bin/launchctl asuser "${console_user_uid}" /bin/launchctl unload -w "$3${launch_agent_base_path}${launch_agent_plist_name}"
    # Kill Nudge just in case (say someone manually opens it and not launched via launchagent
    /usr/bin/killall Nudge
    # Load the launch agent
    /bin/launchctl asuser "${console_user_uid}" /bin/launchctl load -w "$3${launch_agent_base_path}${launch_agent_plist_name}"
  fi

  ## Daemon Logger
  # Fail the install if the admin forgets to change their paths and they don't exist.
  if [ ! -e "$3/${launch_daemon_base_path}${launch_daemon_plist_name}" ]; then
    echo "LaunchDaemon missing, exiting"
    exit 1
  fi

  # Unload the agent so it can be triggered on re-install
  /bin/launchctl unload -w "$3${launch_daemon_base_path}${launch_daemon_plist_name}"
  # Load the launch agent
  /bin/launchctl load -w "$3${launch_daemon_base_path}${launch_daemon_plist_name}"
fi
